#!@PYTHON@
#    This file is part of GNUnet.
#    (C) 2010 Christian Grothoff (and other contributing authors)
#
#    GNUnet is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published
#    by the Free Software Foundation; either version 2, or (at your
#    option) any later version.
#
#    GNUnet is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with GNUnet; see the file COPYING.  If not, write to the
#    Free Software Foundation, Inc., 59 Temple Place - Suite 330,
#    Boston, MA 02111-1307, USA.
#
# 
import sys
import os
import subprocess
import re
import shutil
import time
import pexpect
from gnunet_testing import Peer
from gnunet_testing import Test
from gnunet_testing import Check
from gnunet_testing import Condition
from gnunet_testing import * 
 

#
# This test tests if a fresh peer bootstraps from a hostlist server and then
# successfully connects to the server. When both peers are connected
# in transport, core, topology, fs, the server is shutdown
#
# Conditions for successful exit:
# Both peers have 0 connected peer in transport, core, topology, fs

#definitions

testname = "test_integration_disconnect"
verbose = True
check_timeout = 30


def cleanup ():
	if os.name == "nt":
	    shutil.rmtree (os.path.join (os.getenv ("TEMP"), "gnunet-test-fs-py-ns"), True)
	    shutil.rmtree (os.path.join (os.getenv ("TEMP"), "c_no_nat_client"), True)
	else:
	    shutil.rmtree ("/tmp/c_bootstrap_server/", True)
	    shutil.rmtree ("/tmp/c_no_nat_client/", True)    


def success_disconnect_cont (check):
    global success 
    success = True;


def fail_disconnect_cont (check):    
    global success 
    success = False;
    check.eval(True)   
  

def check_disconnect ():
  test.p ('Shutting down bootstrap server')
  server.stop ()
  check = Check (test)
  check.add (StatisticsCondition (client, 'transport', '# peers connected',0))
  check.add (StatisticsCondition (client, 'core', '# neighbour entries allocated',0))  
  check.add (StatisticsCondition (client, 'core', '# entries in session map',0))
  check.add (StatisticsCondition (client, 'topology', '# peers connected',0))
  check.add (StatisticsCondition (client, 'fs', '# peers connected',0))
  check.run_blocking (check_timeout, success_disconnect_cont, fail_disconnect_cont)


def success_connect_cont (check):
    check_disconnect ()


def fail_connect_cont (check):    
    global success 
    success= False;
    check.eval(True)


def check_connect ():
  check = Check (test)
  check.add (StatisticsCondition (client, 'transport', '# peers connected',1))
  check.add (StatisticsCondition (client, 'core', '# neighbour entries allocated',1))  
  check.add (StatisticsCondition (client, 'core', '# entries in session map',1))
  check.add (StatisticsCondition (client, 'topology', '# peers connected',1))
  check.add (StatisticsCondition (client, 'fs', '# peers connected',1))
  
  check.add (StatisticsCondition (server, 'transport', '# peers connected',1))
  check.add (StatisticsCondition (server, 'core', '# neighbour entries allocated',1))  
  check.add (StatisticsCondition (server, 'core', '# entries in session map',1))
  check.add (StatisticsCondition (server, 'topology', '# peers connected',1))
  check.add (StatisticsCondition (server, 'fs', '# peers connected',1))  
  
  check.run_blocking (check_timeout, success_connect_cont, fail_connect_cont)

# 
# Test execution
# 

def run ():
	global success
	global test
	global server
	global client
	
	success = False
	
	test = Test ('test_integration_disconnect', verbose)
	
	server = Peer(test, './confs/c_bootstrap_server.conf');
	server.start();
	
	client = Peer(test, './confs/c_no_nat_client.conf');
	client.start();
	
	
	if ((client.started == True) and (server.started == True)):
	    test.p ('Peers started, running check')
	    check_connect ()
		
	server.stop ()    
	client.stop ()
	
	cleanup ()
	
	if (success == False):
		print ('Test failed')
		return True
	else:
		return False

	
try:
    run ()
except (KeyboardInterrupt, SystemExit):    
    print 'Test interrupted'
    server.stop ()
    client.stop ()
    cleanup ()
if (success == False):
	sys.exit(1)   
else:
	sys.exit(0)    
	