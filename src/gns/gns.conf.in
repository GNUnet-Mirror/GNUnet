[gns]
AUTOSTART = @AUTOSTART@
FORCESTART = YES
HOSTNAME = localhost
BINARY = gnunet-service-gns
UNIXPATH = $GNUNET_USER_RUNTIME_DIR/gnunet-service-gns.sock
@JAVAPORT@PORT = 2102

# Do we require users that want to access GNS to run this process
# (usually not a good idea)
UNIX_MATCH_UID = NO

# Do we require users that want to access GNS to be in the 'gnunet' group?
UNIX_MATCH_GID = YES

# How many queries is GNS allowed to perform in the background at the same time?
MAX_PARALLEL_BACKGROUND_QUERIES = 1000

# Should we use the DNS interception mechanism?  If set to YES
# we will ask gnunet-service-dns to pass DNS queries to us. Otherwise,
# we only answer GNS queries via the API (which itself may be
# called via NSS or other mechanisms).
INTERCEPT_DNS = YES

# PREFIX = valgrind --leak-check=full --track-origins=yes

# Zones
.pin = DWJASSPE33MRN8T6Q0PENRNBTQY0E6ZYGTRCDP5DGPBF2CRJMJEG
.fr = TFDAXBXMAN40MCG4E8Y9Y1C6D16JCMDPH2VMD30KMB92SECEMYGG

[gns-proxy]
BINARY = gnunet-gns-proxy
AUTOSTART = NO
USER_SERVICE = YES

# Where is the certificate for the GNS proxy stored?
PROXY_CACERT = $GNUNET_DATA_HOME/gns/gns_ca_cert.pem
PROXY_UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-gns-proxy.sock


[dns2gns]
BINARY = gnunet-dns2gns
AUTOSTART = NO
USER_SERVICE = YES

# -d: DNS resolver to use, -s: suffix to use, -f: fcfs suffix to use
OPTIONS = -d 8.8.8.8
