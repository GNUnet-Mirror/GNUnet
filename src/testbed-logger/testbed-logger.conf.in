[testbed]
START_ON_DEMAND = NO
@JAVAPORT@ PORT = 2101
HOSTNAME = localhost
BINARY = gnunet-service-testbed

# How long should operations wait?
OPERATION_TIMEOUT = 30 s

# Set this to the path where the testbed helper is installed.  By default the
# helper binary is searched in @prefix@/lib/gnunet/libexec/
# HELPER_BINARY_PATH = @prefix@/lib/gnunet/libexec/gnunet-helper-testbed

# Add your local network address here. For example, if you want to run
# testbed on a group of hosts connected to network 192.168.1.0/24, then set
#   ACCEPT_FROM = 127.0.0.1; 192.168.1.0/24;
# Multiple network addresses can be given.  They should be separated by `;'
ACCEPT_FROM = 127.0.0.1;
ACCEPT_FROM6 = ::1;

UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-service-testbed.sock
UNIX_MATCH_UID = YES
UNIX_MATCH_GID = YES

# How many maximum number of operations can be run in parallel.  This number
# should be decreased if the system is getting overloaded and to reduce the load
# exerted by the emulation.
MAX_PARALLEL_OPERATIONS = 1000
MAX_PARALLEL_TOPOLOGY_CONFIG_OPERATIONS = 1

# What topology should be generated by the helper functions GNUNET_TESTBED_run()
# and GNUNET_TESTBED_test_run().  This option has no effect if testbed is
# initialized with other functions.  Valid values can be found at:
# https://gnunet.org/supported-topologies
OVERLAY_TOPOLOGY = NONE

# Number of random links to be included to the generate the above topology.
# Note that not all topologies require this option and ignore it.  Topologies
# requiring this option are RANDOM, SMALL_WORLD and SMALL_WORLD ring.
# OVERLAY_RANDOM_LINKS =

# This option is required if the OVERLAY_TOPOLOGY is set to FROM_FILE.  It is
# ignored for all other topologies.  This option should contain the path to
# the file containing the topology information.  The format of the file is
# presented at: https://gnunet.org/topology-file-format
# OVERLAY_TOPOLOGY_FILE = /path/to/topology-file

# The following options are required if the OVERLAY_TOPOLOGY is set to
# SCALE_FREE.  They are ignored in all other cases.
# The number of maximum peers which can connect to a peer
SCALE_FREE_TOPOLOGY_CAP = 70
# The minimum number of peers which a peer has to connect
SCALE_FREE_TOPOLOGY_M = 5

# How many maximum number of handles to peers' services should be kept open at
# any time.  This number also keeps a check on the number of open descriptors as
# opening a service connection results in opening a file descriptor.
MAX_PARALLEL_SERVICE_CONNECTIONS = 256

# Size of the internal testbed cache.  It is used to cache handles to peers
# while trying to connect them.
CACHE_SIZE = 30

# Maximum number of file descriptors a testbed controller is permitted to keep
# open.
MAX_OPEN_FDS = 512

# How long should we wait for testbed to setup while using helper functions
# GNUNET_TESTBED_test_run() and GNUNET_TESTBED_run()
SETUP_TIMEOUT = 5 m

# Where should testbed write load statistics data
# STATS_DIR = /tmp/load

# What services should be shared among peers.
# Format is "[<service:share>] [<service:share>] ...".  The shared services are
# started standalone without any other peer services or a hostkey.  For this
# reason, only services which doesn't depend on other services can only be
# shared.  Example: To share peerinfo among every 10 peers.  The following spec
# will start 5 peerinfo services when 50 peers are started:
#
#   SHARED_SERVICES = peerinfo:10
#
# To share multiple services
#
#   SHARED_SERVICES = service1:n_share1 service2:n_share2 ...
#
# Default is to share no services
SHARED_SERVICES =


[testbed-logger]
START_ON_DEMAND = NO
@UNIXONLY@ PORT = 2102
HOSTNAME = localhost
BINARY = gnunet-service-testbed-logger
UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-gnunet-testbed-logger.sock
DIR = $GNUNET_TMP
UNIX_MATCH_UID = YES
UNIX_MATCH_GID = YES


[testbed-barrier]
START_ON_DEMAND = NO
@UNIXONLY@ PORT = 2103
HOSTNAME = localhost
UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-service-testbed-barrier.sock
UNIX_MATCH_UID = YES
UNIX_MATCH_GID = YES


# This section is related to configuring underlay restrictions to simulate
# connectivity restrictions of NAT boxes
[testbed-underlay]
START_ON_DEMAND = NO
NOARMBIND = YES
BINARY = gnunet-daemon-testbed-underlay
# The sqlite3 database file containing information about what underlay
# restrictions to apply
# DBFILE =

[latency-logger]
START_ON_DEMAND = NO
NOARMBIND = YES
BINARY = gnunet-daemon-latency-logger
# The sqlite3 database file where the latency values are to be stored
# DBFILE =
