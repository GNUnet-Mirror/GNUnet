//
// Generated by JTB 1.3.2
//
package org.gnunet.seaspider.parser.visitors;

import org.gnunet.seaspider.parser.nodes.*;

import java.util.*;

/**
 * A skeleton output formatter for your language grammar.  Using the
 * add() method along with force(), indent(), and outdent(), you can
 * easily specify how this visitor will format the given syntax tree.
 * See the JTB documentation for more details.
 *
 * Pass your syntax tree to this visitor, and then to the TreeDumper
 * visitor in order to "pretty print" your tree.
 */
public class TreeFormatter extends DepthFirstVisitor {
   private Vector<FormatCommand> cmdQueue = new Vector<FormatCommand>();
   private boolean lineWrap;
   private int wrapWidth;
   private int indentAmt;
   private int curLine = 1;
   private int curColumn = 1;
   private int curIndent = 0;

   /**
    * The default constructor assumes an indentation amount of 3 spaces
    * and no line-wrap.  You may alternately use the other constructor to
    * specify your own indentation amount and line width.
    */
   public TreeFormatter() { this(3, 0); }

   /**
    * This constructor accepts an indent amount and a line width which is
    * used to wrap long lines.  If a token's beginColumn value is greater
    * than the specified wrapWidth, it will be moved to the next line and
    * indented one extra level.  To turn off line-wrapping, specify a
    * wrapWidth of 0.
    *
    * @param   indentAmt   Amount of spaces per indentation level.
    * @param   wrapWidth   Wrap lines longer than wrapWidth.  0 for no wrap.
    */
   public TreeFormatter(int indentAmt, int wrapWidth) {
      this.indentAmt = indentAmt;
      this.wrapWidth = wrapWidth;

      if ( wrapWidth > 0 )
         lineWrap = true;
      else
         lineWrap = false;
   }

   /**
    * Accepts a NodeListInterface object and performs an optional format
    * command between each node in the list (but not after the last node).
    */
   protected void processList(NodeListInterface n) {
      processList(n, null);
   }

   protected void processList(NodeListInterface n, FormatCommand cmd) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         if ( cmd != null && e.hasMoreElements() )
            cmdQueue.addElement(cmd);
      }
   }

   /**
    * A Force command inserts a line break and indents the next line to
    * the current indentation level.  Use "add(force());".
    */
   protected FormatCommand force() { return force(1); }
   protected FormatCommand force(int i) {
      return new FormatCommand(FormatCommand.FORCE, i);
   }

   /**
    * An Indent command increases the indentation level by one (or a
    * user-specified amount).  Use "add(indent());".
    */
   protected FormatCommand indent() { return indent(1); }
   protected FormatCommand indent(int i) {
      return new FormatCommand(FormatCommand.INDENT, i);
   }

   /**
    * An Outdent command is the reverse of the Indent command: it reduces
    * the indentation level.  Use "add(outdent());".
    */
   protected FormatCommand outdent() { return outdent(1); }
   protected FormatCommand outdent(int i) {
      return new FormatCommand(FormatCommand.OUTDENT, i);
   }

   /**
    * A Space command simply adds one or a user-specified number of
    * spaces between tokens.  Use "add(space());".
    */
   protected FormatCommand space() { return space(1); }
   protected FormatCommand space(int i) {
      return new FormatCommand(FormatCommand.SPACE, i);
   }

   /**
    * Use this method to add FormatCommands to the command queue to be
    * executed when the next token in the tree is visited.
    */
   protected void add(FormatCommand cmd) {
      cmdQueue.addElement(cmd);
   }

   /**
    * Executes the commands waiting in the command queue, then inserts the
    * proper location information into the current NodeToken.
    *
    * If there are any special tokens preceding this token, they will be
    * given the current location information.  The token will follow on
    * the next line, at the proper indentation level.  If this is not the
    * behavior you want from special tokens, feel free to modify this
    * method.
    */
   public void visit(NodeToken n) {
      for ( Enumeration<FormatCommand> e = cmdQueue.elements(); e.hasMoreElements(); ) {
         FormatCommand cmd = e.nextElement();
         switch ( cmd.getCommand() ) {
         case FormatCommand.FORCE :
            curLine += cmd.getNumCommands();
            curColumn = curIndent + 1;
            break;
         case FormatCommand.INDENT :
            curIndent += indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.OUTDENT :
            if ( curIndent >= indentAmt )
               curIndent -= indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.SPACE :
            curColumn += cmd.getNumCommands();
            break;
         default :
            throw new TreeFormatterException(
               "Invalid value in command queue.");
         }
      }

      cmdQueue.removeAllElements();

      //
      // Handle all special tokens preceding this NodeToken
      //
      if ( n.numSpecials() > 0 )
         for ( Enumeration<NodeToken> e = n.specialTokens.elements();
               e.hasMoreElements(); ) {
            NodeToken special = e.nextElement();

            //
            // -Place the token.
            // -Move cursor to next line after the special token.
            // -Don't update curColumn--want to keep current indent level.
            //
            placeToken(special, curLine, curColumn);
            curLine = special.endLine + 1;
         }

      placeToken(n, curLine, curColumn);
      curLine = n.endLine;
      curColumn = n.endColumn;
   }

   /**
    * Inserts token location (beginLine, beginColumn, endLine, endColumn)
    * information into the NodeToken.  Takes into account line-wrap.
    * Does not update curLine and curColumn.
    */
   private void placeToken(NodeToken n, int line, int column) {
      int length = n.tokenImage.length();

      //
      // Find beginning of token.  Only line-wrap for single-line tokens
      //
      if ( !lineWrap || n.tokenImage.indexOf('\n') != -1 ||
           column + length <= wrapWidth )
         n.beginColumn = column;
      else {
         ++line;
         column = curIndent + indentAmt + 1;
         n.beginColumn = column;
      }

      n.beginLine = line;

      //
      // Find end of token; don't count \n if it's the last character
      //
      for ( int i = 0; i < length; ++i ) {
         if ( n.tokenImage.charAt(i) == '\n' && i < length - 1 ) {
            ++line;
            column = 1;
         }
         else
            ++column;
      }

      n.endLine = line;
      n.endColumn = column;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( ExternalDeclaration() )+
    * </PRE>
    */
   public void visit(TranslationUnit n) {
      processList(n.f0);
   }

   /**
    * <PRE>
    * f0 -> ( StorageClassSpecifier() )*
    * f1 -> ( FunctionDeclaration() | StructOrUnionSpecifier() | VariableDeclaration() | TypeDeclaration() )
    * </PRE>
    */
   public void visit(ExternalDeclaration n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> "("
    * f3 -> [ ParameterList() ]
    * f4 -> ")"
    * f5 -> ( ";" | CompoundStatement() )
    * </PRE>
    */
   public void visit(FunctionDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;STATIC&gt; | &lt;EXTERN&gt; )
    * </PRE>
    */
   public void visit(StorageClassSpecifier n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;TYPEDEF&gt;
    * f1 -> ( DataType() | FunctionType() )
    * f2 -> ";"
    * </PRE>
    */
   public void visit(TypeDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> StructOrUnionSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(DataType n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> "("
    * f2 -> "*"
    * f3 -> &lt;IDENTIFIER&gt;
    * f4 -> ")"
    * f5 -> "("
    * f6 -> [ ParameterList() ]
    * f7 -> ")"
    * </PRE>
    */
   public void visit(FunctionType n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      if ( n.f6.present() ) {
         n.f6.accept(this);
      }
      n.f7.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    * f2 -> [ "," "..." ]
    * </PRE>
    */
   public void visit(ParameterList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Array() ]
    * </PRE>
    */
   public void visit(ParameterDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> VariableClassSpecifier()
    * f1 -> TypeSpecifier()
    * f2 -> InitDeclaratorList()
    * f3 -> ";"
    * </PRE>
    */
   public void visit(VariableDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> [ &lt;STATIC&gt; ]
    * f1 -> VariableDeclaration()
    * </PRE>
    */
   public void visit(LocalVariableDeclaration n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;AUTO&gt; | &lt;REGISTER&gt; )*
    * </PRE>
    */
   public void visit(VariableClassSpecifier n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
   }

   /**
    * <PRE>
    * f0 -> [ &lt;CONST&gt; ]
    * f1 -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | ( &lt;SIGNED&gt; | &lt;UNSIGNED&gt; ) [ &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] ] | StructOrUnionSpecifier() | EnumSpecifier() | &lt;IDENTIFIER&gt; )
    * f2 -> [ Pointer() ]
    * f3 -> [ Array() ]
    * </PRE>
    */
   public void visit(TypeSpecifier n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> [ &lt;CONST&gt; ]
    * f1 -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | ( &lt;SIGNED&gt; | &lt;UNSIGNED&gt; ) [ &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] ] | StructOrUnionSpecifier() | EnumSpecifier() )
    * f2 -> [ Pointer() ]
    * f3 -> [ Array() ]
    * </PRE>
    */
   public void visit(NoIdentifierTypeSpecifier n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> StructOrUnion() [ &lt;IDENTIFIER&gt; ] "{" StructDeclarationList() "}"
    *       | StructOrUnion() &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(StructOrUnionSpecifier n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;STRUCT&gt; | &lt;UNION&gt; )
    * </PRE>
    */
   public void visit(StructOrUnion n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( StructDeclaration() )+
    * </PRE>
    */
   public void visit(StructDeclarationList n) {
      processList(n.f0);
   }

   /**
    * <PRE>
    * f0 -> InitDeclarator()
    * f1 -> ( "," InitDeclarator() )*
    * </PRE>
    */
   public void visit(InitDeclaratorList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ Array() ]
    * f2 -> [ "=" Initializer() ]
    * </PRE>
    */
   public void visit(InitDeclarator n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Array() | ":" ConstantExpression() ]
    * f3 -> [ &lt;IDENTIFIER&gt; ]
    * f4 -> ";"
    * </PRE>
    */
   public void visit(StructDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;ENUM&gt;
    * f1 -> ( [ &lt;IDENTIFIER&gt; ] "{" EnumeratorList() "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public void visit(EnumSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> Enumerator()
    * f1 -> ( "," Enumerator() )*
    * </PRE>
    */
   public void visit(EnumeratorList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ "=" ConstantExpression() ]
    * </PRE>
    */
   public void visit(Enumerator n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> "*"
    * f1 -> [ &lt;CONST&gt; ]
    * f2 -> [ Pointer() ]
    * </PRE>
    */
   public void visit(Pointer n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "," &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(IdentifierList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> ( AssignmentExpression() | "{" InitializerList() [ "," ] "}" )
    * </PRE>
    */
   public void visit(Initializer n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> Initializer()
    * f1 -> ( "," Initializer() )*
    * </PRE>
    */
   public void visit(InitializerList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> [ ConstantExpression() ]
    * f2 -> "]"
    * </PRE>
    */
   public void visit(Array n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( LabeledStatement() | ExpressionStatement() | CompoundStatement() | SelectionStatement() | IterationStatement() | JumpStatement() )
    * </PRE>
    */
   public void visit(Statement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; ":" Statement() | &lt;CASE&gt; ConstantExpression() ":" Statement() | &lt;DFLT&gt; ":" Statement() )
    * </PRE>
    */
   public void visit(LabeledStatement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> [ Expression() ]
    * f1 -> ";"
    * </PRE>
    */
   public void visit(ExpressionStatement n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( LocalVariableDeclaration() | Statement() )*
    * f2 -> "}"
    * </PRE>
    */
   public void visit(CompoundStatement n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;IF&gt; "(" Expression() ")" Statement() [ &lt;ELSE&gt; Statement() ] | &lt;SWITCH&gt; "(" Expression() ")" Statement() )
    * </PRE>
    */
   public void visit(SelectionStatement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;WHILE&gt; "(" Expression() ")" Statement() | &lt;DO&gt; Statement() &lt;WHILE&gt; "(" Expression() ")" ";" | &lt;FOR&gt; "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement() )
    * </PRE>
    */
   public void visit(IterationStatement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;GOTO&gt; &lt;IDENTIFIER&gt; ";" | &lt;CONTINUE&gt; ";" | &lt;BREAK&gt; ";" | &lt;RETURN&gt; [ Expression() ] ";" )
    * </PRE>
    */
   public void visit(JumpStatement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(Expression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public void visit(AssignmentExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&lt;&lt;=" | "&gt;&gt;=" | "&=" | "^=" | "|=" )
    * </PRE>
    */
   public void visit(AssignmentOperator n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> LogicalORExpression()
    * f1 -> [ "?" Expression() ":" ConditionalExpression() ]
    * </PRE>
    */
   public void visit(ConditionalExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * </PRE>
    */
   public void visit(ConstantExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> LogicalANDExpression()
    * f1 -> [ "||" LogicalORExpression() ]
    * </PRE>
    */
   public void visit(LogicalORExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> InclusiveORExpression()
    * f1 -> [ "&&" LogicalANDExpression() ]
    * </PRE>
    */
   public void visit(LogicalANDExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> ExclusiveORExpression()
    * f1 -> [ "|" InclusiveORExpression() ]
    * </PRE>
    */
   public void visit(InclusiveORExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> ANDExpression()
    * f1 -> [ "^" ExclusiveORExpression() ]
    * </PRE>
    */
   public void visit(ExclusiveORExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> [ "&" ANDExpression() ]
    * </PRE>
    */
   public void visit(ANDExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> [ ( "==" | "!=" ) EqualityExpression() ]
    * </PRE>
    */
   public void visit(EqualityExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> [ ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" ) RelationalExpression() ]
    * </PRE>
    */
   public void visit(RelationalExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> [ ( "&lt;&lt;" | "&gt;&gt;" ) ShiftExpression() ]
    * </PRE>
    */
   public void visit(ShiftExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> [ ( "+" | "-" ) AdditiveExpression() ]
    * </PRE>
    */
   public void visit(AdditiveExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> CastExpression()
    * f1 -> [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
    * </PRE>
    */
   public void visit(MultiplicativeExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> ( "(" TypeSpecifier() ")" CastExpression() | UnaryExpression() )
    * </PRE>
    */
   public void visit(CastExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( PostfixExpression() | "++" UnaryExpression() | "--" UnaryExpression() | UnaryOperator() CastExpression() | &lt;SIZEOF&gt; ( UnaryExpression() | "(" TypeSpecifier() ")" ) )
    * </PRE>
    */
   public void visit(UnaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( "&" | "*" | "+" | "-" | "~" | "!" )
    * </PRE>
    */
   public void visit(UnaryOperator n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> PrimaryExpression()
    * f1 -> ( "[" Expression() "]" | "(" [ ArgumentExpressionList() ] ")" | "." &lt;IDENTIFIER&gt; | "-&gt;" &lt;IDENTIFIER&gt; | "++" | "--" )*
    * </PRE>
    */
   public void visit(PostfixExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    *       | Constant()
    *       | "(" Expression() ")"
    * </PRE>
    */
   public void visit(PrimaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AssignmentOrTypeExpression()
    * f1 -> ( "," AssignmentOrTypeExpression() )*
    * </PRE>
    */
   public void visit(ArgumentExpressionList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> NoIdentifierTypeSpecifier()
    *       | AssignmentExpression()
    * </PRE>
    */
   public void visit(AssignmentOrTypeExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    * </PRE>
    */
   public void visit(Constant n) {
      n.f0.accept(this);
   }

}

class FormatCommand {
   public static final int FORCE = 0;
   public static final int INDENT = 1;
   public static final int OUTDENT = 2;
   public static final int SPACE = 3;

   private int command;
   private int numCommands;

   FormatCommand(int command, int numCommands) {
      this.command = command;
      this.numCommands = numCommands;
   }

   public int getCommand()             { return command; }
   public int getNumCommands()         { return numCommands; }
   public void setCommand(int i)       { command = i; }
   public void setNumCommands(int i)   { numCommands = i; }
}

class TreeFormatterException extends RuntimeException {
   TreeFormatterException()         { super(); }
   TreeFormatterException(String s) { super(s); }
}
