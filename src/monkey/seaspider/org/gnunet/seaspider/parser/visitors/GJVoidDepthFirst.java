//
// Generated by JTB 1.3.2
//

package org.gnunet.seaspider.parser.visitors;
import org.gnunet.seaspider.parser.nodes.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( ExternalDeclaration() )+
    * </PRE>
    */
   public void visit(TranslationUnit n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( StorageClassSpecifier() )*
    * f1 -> ( FunctionDeclaration() | StructOrUnionSpecifier() | VariableDeclaration() | TypeDeclaration() )
    * </PRE>
    */
   public void visit(ExternalDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> "("
    * f3 -> [ ParameterList() ]
    * f4 -> ")"
    * f5 -> ( ";" | CompoundStatement() )
    * </PRE>
    */
   public void visit(FunctionDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;STATIC&gt; | &lt;EXTERN&gt; )
    * </PRE>
    */
   public void visit(StorageClassSpecifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;TYPEDEF&gt;
    * f1 -> ( DataType() | FunctionType() )
    * f2 -> ";"
    * </PRE>
    */
   public void visit(TypeDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> StructOrUnionSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(DataType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> "("
    * f2 -> "*"
    * f3 -> &lt;IDENTIFIER&gt;
    * f4 -> ")"
    * f5 -> "("
    * f6 -> [ ParameterList() ]
    * f7 -> ")"
    * </PRE>
    */
   public void visit(FunctionType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    * f2 -> [ "," "..." ]
    * </PRE>
    */
   public void visit(ParameterList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Array() ]
    * </PRE>
    */
   public void visit(ParameterDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> VariableClassSpecifier()
    * f1 -> TypeSpecifier()
    * f2 -> InitDeclaratorList()
    * f3 -> ";"
    * </PRE>
    */
   public void visit(VariableDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> [ &lt;STATIC&gt; ]
    * f1 -> VariableDeclaration()
    * </PRE>
    */
   public void visit(LocalVariableDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;AUTO&gt; | &lt;REGISTER&gt; )*
    * </PRE>
    */
   public void visit(VariableClassSpecifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> [ &lt;CONST&gt; ]
    * f1 -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | ( &lt;SIGNED&gt; | &lt;UNSIGNED&gt; ) [ &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] ] | StructOrUnionSpecifier() | EnumSpecifier() | &lt;IDENTIFIER&gt; )
    * f2 -> [ Pointer() ]
    * f3 -> [ Array() ]
    * </PRE>
    */
   public void visit(TypeSpecifier n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> [ &lt;CONST&gt; ]
    * f1 -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | ( &lt;SIGNED&gt; | &lt;UNSIGNED&gt; ) [ &lt;CHAR&gt; | &lt;SHORT&gt; [ &lt;INT&gt; ] | &lt;INT&gt; | &lt;LONG&gt; [ &lt;LONG&gt; ] ] | StructOrUnionSpecifier() | EnumSpecifier() )
    * f2 -> [ Pointer() ]
    * f3 -> [ Array() ]
    * </PRE>
    */
   public void visit(NoIdentifierTypeSpecifier n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> StructOrUnion() [ &lt;IDENTIFIER&gt; ] "{" StructDeclarationList() "}"
    *       | StructOrUnion() &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(StructOrUnionSpecifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;STRUCT&gt; | &lt;UNION&gt; )
    * </PRE>
    */
   public void visit(StructOrUnion n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( StructDeclaration() )+
    * </PRE>
    */
   public void visit(StructDeclarationList n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> InitDeclarator()
    * f1 -> ( "," InitDeclarator() )*
    * </PRE>
    */
   public void visit(InitDeclaratorList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ Array() ]
    * f2 -> [ "=" Initializer() ]
    * </PRE>
    */
   public void visit(InitDeclarator n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> TypeSpecifier()
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> [ Array() | ":" ConstantExpression() ]
    * f3 -> [ &lt;IDENTIFIER&gt; ]
    * f4 -> ";"
    * </PRE>
    */
   public void visit(StructDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;ENUM&gt;
    * f1 -> ( [ &lt;IDENTIFIER&gt; ] "{" EnumeratorList() "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public void visit(EnumSpecifier n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> Enumerator()
    * f1 -> ( "," Enumerator() )*
    * </PRE>
    */
   public void visit(EnumeratorList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ "=" ConstantExpression() ]
    * </PRE>
    */
   public void visit(Enumerator n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> "*"
    * f1 -> [ &lt;CONST&gt; ]
    * f2 -> [ Pointer() ]
    * </PRE>
    */
   public void visit(Pointer n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "," &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(IdentifierList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( AssignmentExpression() | "{" InitializerList() [ "," ] "}" )
    * </PRE>
    */
   public void visit(Initializer n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> Initializer()
    * f1 -> ( "," Initializer() )*
    * </PRE>
    */
   public void visit(InitializerList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> [ ConstantExpression() ]
    * f2 -> "]"
    * </PRE>
    */
   public void visit(Array n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( LabeledStatement() | ExpressionStatement() | CompoundStatement() | SelectionStatement() | IterationStatement() | JumpStatement() )
    * </PRE>
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; ":" Statement() | &lt;CASE&gt; ConstantExpression() ":" Statement() | &lt;DFLT&gt; ":" Statement() )
    * </PRE>
    */
   public void visit(LabeledStatement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> [ Expression() ]
    * f1 -> ";"
    * </PRE>
    */
   public void visit(ExpressionStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> ( LocalVariableDeclaration() | Statement() )*
    * f2 -> "}"
    * </PRE>
    */
   public void visit(CompoundStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;IF&gt; "(" Expression() ")" Statement() [ &lt;ELSE&gt; Statement() ] | &lt;SWITCH&gt; "(" Expression() ")" Statement() )
    * </PRE>
    */
   public void visit(SelectionStatement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;WHILE&gt; "(" Expression() ")" Statement() | &lt;DO&gt; Statement() &lt;WHILE&gt; "(" Expression() ")" ";" | &lt;FOR&gt; "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement() )
    * </PRE>
    */
   public void visit(IterationStatement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( &lt;GOTO&gt; &lt;IDENTIFIER&gt; ";" | &lt;CONTINUE&gt; ";" | &lt;BREAK&gt; ";" | &lt;RETURN&gt; [ Expression() ] ";" )
    * </PRE>
    */
   public void visit(JumpStatement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public void visit(AssignmentExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&lt;&lt;=" | "&gt;&gt;=" | "&=" | "^=" | "|=" )
    * </PRE>
    */
   public void visit(AssignmentOperator n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> LogicalORExpression()
    * f1 -> [ "?" Expression() ":" ConditionalExpression() ]
    * </PRE>
    */
   public void visit(ConditionalExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * </PRE>
    */
   public void visit(ConstantExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> LogicalANDExpression()
    * f1 -> [ "||" LogicalORExpression() ]
    * </PRE>
    */
   public void visit(LogicalORExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> InclusiveORExpression()
    * f1 -> [ "&&" LogicalANDExpression() ]
    * </PRE>
    */
   public void visit(LogicalANDExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ExclusiveORExpression()
    * f1 -> [ "|" InclusiveORExpression() ]
    * </PRE>
    */
   public void visit(InclusiveORExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ANDExpression()
    * f1 -> [ "^" ExclusiveORExpression() ]
    * </PRE>
    */
   public void visit(ExclusiveORExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> [ "&" ANDExpression() ]
    * </PRE>
    */
   public void visit(ANDExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> [ ( "==" | "!=" ) EqualityExpression() ]
    * </PRE>
    */
   public void visit(EqualityExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> [ ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" ) RelationalExpression() ]
    * </PRE>
    */
   public void visit(RelationalExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> [ ( "&lt;&lt;" | "&gt;&gt;" ) ShiftExpression() ]
    * </PRE>
    */
   public void visit(ShiftExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> [ ( "+" | "-" ) AdditiveExpression() ]
    * </PRE>
    */
   public void visit(AdditiveExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> CastExpression()
    * f1 -> [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
    * </PRE>
    */
   public void visit(MultiplicativeExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( "(" TypeSpecifier() ")" CastExpression() | UnaryExpression() )
    * </PRE>
    */
   public void visit(CastExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( PostfixExpression() | "++" UnaryExpression() | "--" UnaryExpression() | UnaryOperator() CastExpression() | &lt;SIZEOF&gt; ( UnaryExpression() | "(" TypeSpecifier() ")" ) )
    * </PRE>
    */
   public void visit(UnaryExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> ( "&" | "*" | "+" | "-" | "~" | "!" )
    * </PRE>
    */
   public void visit(UnaryOperator n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> PrimaryExpression()
    * f1 -> ( "[" Expression() "]" | "(" [ ArgumentExpressionList() ] ")" | "." &lt;IDENTIFIER&gt; | "-&gt;" &lt;IDENTIFIER&gt; | "++" | "--" )*
    * </PRE>
    */
   public void visit(PostfixExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    *       | Constant()
    *       | "(" Expression() ")"
    * </PRE>
    */
   public void visit(PrimaryExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> AssignmentOrTypeExpression()
    * f1 -> ( "," AssignmentOrTypeExpression() )*
    * </PRE>
    */
   public void visit(ArgumentExpressionList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> NoIdentifierTypeSpecifier()
    *       | AssignmentExpression()
    * </PRE>
    */
   public void visit(AssignmentOrTypeExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    * </PRE>
    */
   public void visit(Constant n, A argu) {
      n.f0.accept(this, argu);
   }

}
