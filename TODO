0.9.0pre1:
* FS: [CG]
  - test indexing
  - test migration
  - TTL/priority calculations
  - hot-path routing, load considerations
  - statistics
  - active reply route caching design & implementation of service; gap extension!
  - Indexing:
May 16 12:49:50 fs-13737 WARNING `open' failed on file `/home/grothoff/svn/gnunet/src/fs/H/' at disk.c:1253 with error: No such file or directory
May 16 12:49:50 fs-13737 WARNING Could not access indexed file `ENUTBMBR' at offset 2064384: No such file or directory
    NOTE: corrupted filename in open message
    NOTE: odd directory name in open message

This calls 'receive' while receive is pending!

#0  0x00002b53fc14ef45 in *__GI_raise (sig=<value optimized out>) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
#1  0x00002b53fc151d80 in *__GI_abort () at abort.c:88
#2  0x00002b53fbcda6e4 in GNUNET_CONNECTION_receive (sock=0x2021740, max=65536, timeout=..., receiver=0x2b53fbcd43de <receive_helper>, receiver_cls=0x2031880) at connection.c:1180
#3  0x00002b53fbcd48a5 in GNUNET_CLIENT_receive (sock=0x2031880, handler=0x2b53fb6bc695 <process_result_message>, handler_cls=0x208b740, timeout=...) at client.c:535
#4  0x00002b53fb6bcd8b in GNUNET_DATASTORE_get_next (h=0x2034370, more=1) at datastore_api.c:1237
#5  0x00002b53fb6bce5b in GNUNET_DATASTORE_cancel (qe=0x208b740) at datastore_api.c:1271
#6  0x00000000004044c1 in shutdown_task (cls=0x0, tc=0x7fff251a8b00) at gnunet-service-fs.c:1376
#7  0x00002b53fbcf1f50 in run_ready (sched=0x7fff251a8b70) at scheduler.c:514
#8  0x00002b53fbcf2360 in GNUNET_SCHEDULER_run (task=0x2b53fbcf77e7 <service_task>, task_cls=0x7fff251a8e20) at scheduler.c:642
#9  0x00002b53fbcf86da in GNUNET_SERVICE_run (argc=3, argv=0x7fff251a9048, serviceName=0x409845 "fs", opt=GNUNET_SERVICE_OPTION_NONE, task=0x40801f <run>, task_cls=0x0) at service.c:1404
#10 0x0000000000408127 in main (argc=3, argv=0x7fff251a9048) at gnunet-service-fs.c:3536


May 18 10:53:51 transport-8149 WARNING External protocol violation detected at plugin_transport_tcp.c:1275.

* TBENCH: [MW]
  - good to have for transport/DV evaluation! 
* DV: [Nate]
  - write DV API (need to move declarations from dv_api.c to gnunet_dv_service.h!)
  - implement DV service 
  - implement DV library (looks done)
  - implement DV transport plugin
  - implement testcases 
  - implement performance tests (needs tbench)
* TOPOLOGY:
  - needs more testing (especially F2F topology) & transport blacklisting
* UTIL:
  - only connect() sockets that are ready (select()) [Nils]
    [On W32, we need to select after calling socket before doing connect etc.]
  - add support for UNIX domain sockets [CG]
* GNUNET-GTK:
  - use g_main_context_set_poll_func to integrate GTK with GNUnet Scheduler!? (YUCK!)
  - OR: add scheduler API to enable integration with GTK main loop instead of doing our own select
  - use g_main_context_pending, g_main_context_query / g_main_context_check / g_main_context_dispatch
    and NEVER g_main_loop_run (can this be done? might be the clean way to do this! But how
    to integrate this with "gtk_main"?  Docu says:
    "It's OK to use the GLib main loop directly instead of gtk_main(), though it involves 
     slightly more typing. See GMainLoop in the GLib documentation."
    => so maybe it "just works"?
* SETUP:
  - design & implement new setup tool

0.9.0pre2:
* TRACEKIT: [MW]
  - good to have for DV/DHT evaluation!
* DHT: [Nate]
  - implement DHT service 
  - implement testcases
  - implement performance tests
* TRANSPORT:
  - HTTP backend [MW]
* ARM: [Safey]
  - better crash management (attach debugging support, capture and analyze
    debug output, detect random vs. deterministic crashes)
  - discover dependencies between services
    => need UNIX domain sockets first!
  - handle gnunet-arm -k in combination with auto-start magic (what is the right thing here?)
* FS: [CG]
  - datastore reservation (publishing)
  - location URIs (publish, search, download)
  - unindex on index failure
  - utilize in-line files in meta data always (including in search results or
    when download is triggered manually and for probes); currently the data is
    only used when users do a general 'recursive' download
  - non-anonymous FS service (needs DHT)
    + DHT integration for search
    + CS-DHT-functions (DHT-put of LOC)
    + P2P-functions (DHT-get)
  - collection API & tests
    + gnunet-pseudonym (collection support)
  - implement FS performance tests
    + insert
    + download
    + search
    + unindex
* MIGRATION:
  - improved content selection (not just 'get_random')

0.9.0pre3:
* Determine RC bugs and fix those!
* TESTING: [Nate]
  - modify configuration to allow controlling connections for non-local starts
  - testbed creation with topology (needs working F2F topology) 
  - testbed with churn 
  - implement testcases for distributed testing
  - test basic peer re-configure 
  - test topology creation 
  - test churn generation 
  - consider changing API for peer-group termination to 
    call continuation when done
* NAT/UPNP: [MW]
  - finalize API design
  - code clean up
  - testing
  - integration with transport service
* MYSQL database backends: [CG]
  - datacache
  - datastore
* FS:
  - reconstruct IBLOCKS from DBLOCKS if possible (during download; see FIXME in fs_download)
  - add support for pushing "already seen" search results to FS service for bloomfilter (can wait)
  - use different 'priority' for probe downloads vs. normal downloads
* ARM:
  - better tracking of which config changes actually need to cause process restarts by ARM.

0.9.0:
* new webpage:
  - expand bibliography
  - convert documentation pages to books
  - update books (especially for developers)
  - create good Drupal theme for GNUnet
  - make a NICE download page and figure out how to enable developers to publish TGZs nicely
  - port "contact" page
  - add content type for "todo" items?
* POSTGRES database backends: [CG]
  - datacache
  - datastore
* Determine RC bugs and fix those!

0.9.x:
* TRANSPORT: [MW]
  - SMTP transport backend
  - HTTPS transport backend
    + improved HTTPS support in MHD
    + actual plugin
  - Implement method of learning our external addresses from
    other peers; need some kind of threshold-based
    scheme, limiting both the total number of addresses that we accept 
    this way as well as requiring multiple confirmations; also, we
    should possibly try to confirm that the given address works for
    us ourselves (loopback-style) before adding it to the list
    + we may be able to simplify WELCOME messages (no need to add 
      addresses there anymore, but may help to learn them there anyway...).
    + we probably want some kind of voting/counting for learning IP addresses
      (maybe including IP addresses in ads proportional to how often others
       report them? we at least need some protection against >64k HELLOs!),
    + provide a way to give the user a list of "learned" IP addresses and
      a way to easily "veto" addresses off the list!
      => If MiM attacker uses vetoed address, blacklist the specific IP for
         the presumed neighbour!
  - implement gnunet-transport (transport configurator / tester)
  - UPnP-based IP detection
    (Note: build library always, build service when libxml2/etc. are available)
* FS: [CG]
  - Remove KBlocks in gnunet-unindex (see discussion with Kenneth Almquist on gnunet-devs in 9/2009)
* PEERINFO: [CG]
  - expire 'ancient' HELLOs (those without valid addresses AND that 
    we have not 'used' (for their public keys) in a while; need a way
    to track actual 'use')
  - make sue we also trigger notifications whenever HELLOs expire
* VPN



Optimizations:
* TCP:
  - should use hash map to look up sessions
* STATISTICS:
  - should use BIO instead of mmap
* TRANSPORT:
  - need to periodically probe latency/transport cost changes & possibly switch transport
  - should use hash map to look up Neighbours (service AND plugins!)
* DATASTORE (?):
  - check for duplicates on insertion (currently, same content is frequently
    stored again [seen with KBLOCKS and SBLOCKS]!)
* PEERINFO:
  - merge multiple HELLOs of the same peer in the transmission queue
    (theoretically reduces overhead; bounds message queue size)
  - merge multiple iteration requests over "all" peers in the queue
    (theoretically reduces overhead; bounds messgae queue size)
* FS:
  - use different queue prioritization for probe-downloads vs. normal downloads (!?)

Minor features:
* TCP:
  - repeatedly resolve hostname and look up interfaces to determine our own IP
  - [./transport/plugin_transport_tcp.c:391]: (style) struct or union member 'Plugin::address_update_task' is never used (related to issue above)
* TRANSPORT:
  - [./transport/gnunet-service-transport.c:173]: (style) struct or union member 'TransportPlugin::rebuild' is never used (related to TCP not refreshing external addresses?)
* BLOCKS:
  - testcase would be nice...
