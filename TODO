0.9.0pre2:
* UTIL:
  - only connect() sockets that are ready (select()) [Nils]
    [On W32, we need to select after calling socket before doing connect etc.]
* TRANSPORT:
  - HTTP backend [MW]
  - Jun 27 11:51:54 core-7670 ERROR Assertion failed at gnunet-service-core.c:3616.
    (transport notified us that we connected to ourselves!!!)
* CORE:
  - transport-level disconnect (i.e. TCP) does not cause core-level
    disconnect in a timely fashion (waits for connection timeout);
    need to figure a way to make it near-instant in those cases 
    (i.e. rapid reduction in timeout on transport-level disconnect) [CG]
  - derived key generation [Nils]
* DHT: [Nate]
  - implement DHT service 
  - implement testcases
  - implement performance tests
* FS: [CG]
  - service:
    + trust: do not charge when "idle" / load considerations (migration, routing)
    + artificial delays
    + active reply route caching design & implementation of service; gap extension!
  - non-anonymous FS service (needs DHT)
    + DHT integration for search
    + CS-DHT-functions (DHT-put of LOC)
    + P2P-functions (DHT-get)
  - implement FS performance tests
    + insert
    + download
    + search
    + unindex
* GNUNET-GTK: [CG]
  - implement publish dialog details:
    + open (import directory structure)
    + normalize keywords (edit subdialog)
    + set/view previews (edit subdialog)
    + mark 'insert file' button inconsistent for directories (edit subdialog)
  - right-clicking on search result should open menu that allows:
    + starting recursive download 
    + aborting active download 
    + copy URI to clipboard 
    + save-as gnunet-directory
  - events:
    + implement clear button in search tabs (to stop downloads)
    + search resume
    + search error
    + download error
    + download resume
    + publish resume
    + publish error
  - implement new-pseudonym and advertise-pseudonym dialogs
  - namespace search
  - NS list in search dialog should use colors to offset our own namespaces from the others
  - double-clicking on NS list in search dialog should move 'root' to keyword line
  - right-clicking on NS list in search dialog should open menu that allows 
    + viewing full meta data 
    + deletion of namespace info
  - extend peer dialog with green-yellow-red connectivity status lights
  - extend peer dialog with country flags and names
  - implement statistics tabs
  - do meaningful update to status line (starting up, peer running, #connections, shutdown, ...)
  - implement unindex operation (use dialog with all indexed files for selection)
  - implement download by URI dialog; figure out where to display those downloads!
  - figure out where in the GUI we should show active uploads/unindex operations and allow aborts
  - handle 'lost parent' case for recursive downloads (need to move children!)
* MONKEY: [Safey]
  - better crash management (attach debugging support, capture and analyze
    debug output, detect random vs. deterministic crashes)
* TBENCH: [MW]
  - good to have for transport/DV evaluation! 
* DV: [Nate]
  - implement performance tests (needs tbench)


0.9.0pre3:
* TRACEKIT: [MW]
  - good to have for DV/DHT evaluation!
* Determine RC bugs and fix those!
* DATASTORE:
  - GNUNET_DATASTORE_cancel method not tested
* TESTING: [Nate]
  - test basic peer re-configure 
  - consider changing API for peer-group termination to 
    call continuation when done
* TOPOLOGY:
  - needs more testing (especially F2F topology) & transport blacklisting
* NAT/UPNP: [MW]
  - finalize API design
  - code clean up
  - testing
  - integration with transport service
* MYSQL database backends: [CG]
  - datacache
  - datastore
* FS: [CG]
  - reconstruct IBLOCKS from DBLOCKS if possible (during download; see FIXME in fs_download)
  - add support for pushing "already seen" search results to FS service for bloomfilter (can wait)
  - use different 'priority' for probe downloads vs. normal downloads
* ARM: [CG/Safey]
  - better tracking of which config changes actually need to cause process restarts by ARM.
  - handle gnunet-arm -k in combination with auto-start magic (what is the right thing here?)
  - discover dependencies between services
* STATISTICS:
  - test notification-based statistics API
* SETUP:
  - design & implement new setup tool

0.9.0:
* new webpage:
  - convert documentation pages to books
  - update books (especially for developers)
  - create good Drupal theme for GNUnet
  - make a NICE download page and figure out how to enable developers to publish TGZs nicely
  - port "contact" page
  - add content type for "todo" items?
* POSTGRES database backends: [CG]
  - datacache
  - datastore
* Determine RC bugs and fix those!

0.9.x:
* TRANSPORT: [MW]
  - SMTP transport backend
  - HTTPS transport backend
    + improved HTTPS support in MHD
    + actual plugin
  - Implement method of learning our external addresses from
    other peers; need some kind of threshold-based
    scheme, limiting both the total number of addresses that we accept 
    this way as well as requiring multiple confirmations; also, we
    should possibly try to confirm that the given address works for
    us ourselves (loopback-style) before adding it to the list
    + we may be able to simplify WELCOME messages (no need to add 
      addresses there anymore, but may help to learn them there anyway...).
    + we probably want some kind of voting/counting for learning IP addresses
      (maybe including IP addresses in ads proportional to how often others
       report them? we at least need some protection against >64k HELLOs!),
    + provide a way to give the user a list of "learned" IP addresses and
      a way to easily "veto" addresses off the list!
      => If MiM attacker uses vetoed address, blacklist the specific IP for
         the presumed neighbour!
  - implement gnunet-transport (transport configurator / tester)
  - UPnP-based IP detection
    (Note: build library always, build service when libxml2/etc. are available)
* FS: [CG]
  - Remove KBlocks in gnunet-unindex (see discussion with Kenneth Almquist on gnunet-devs in 9/2009)
* PEERINFO: [CG]
  - expire 'ancient' HELLOs (those without valid addresses AND that 
    we have not 'used' (for their public keys) in a while; need a way
    to track actual 'use')
  - make sue we also trigger notifications whenever HELLOs expire
* VPN
* UTIL:
  - allow limiting UNIX socket access by UID/GID



Optimizations:
* TCP:
  - should use hash map to look up sessions
* STATISTICS:
  - should use BIO instead of mmap
* TRANSPORT:
  - need to periodically probe latency/transport cost changes & possibly switch transport
  - should use hash map to look up Neighbours (service AND plugins!)
* PEERINFO:
  - merge multiple HELLOs of the same peer in the transmission queue
    (theoretically reduces overhead; bounds message queue size)
  - merge multiple iteration requests over "all" peers in the queue
    (theoretically reduces overhead; bounds messgae queue size)
* FS:
  - use different queue prioritization for probe-downloads vs. normal downloads (!?)
* CORE:
  - encrypted P2P transmission (loopback) tops at 2 MB/s on my quad-core;
    why is it so slow? Fix! (see core_api_reliability test)

Minor features:
* TCP:
  - repeatedly resolve hostname and look up interfaces to determine our own IP
  - [./transport/plugin_transport_tcp.c:391]: (style) struct or union member 'Plugin::address_update_task' is never used (related to issue above)
* TRANSPORT:
  - [./transport/gnunet-service-transport.c:173]: (style) struct or union member 'TransportPlugin::rebuild' is never used (related to TCP not refreshing external addresses?)
* BLOCKS:
  - testcase would be nice...
