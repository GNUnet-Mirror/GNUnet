0.9.0pre2:
* BIG CORE REFACTORING:
  - fix transport plugin API (ATS!) [mw]
  - fix DV [nate]
* Integration test:
  - test bootstrapping via hostlist + transport/core/dht connect
* CORE:
  - Jun 27 11:51:54 core-7670 ERROR Assertion failed at gnunet-service-core.c:3616.
    (transport notified us that we connected to ourselves!!!; can we still reproduce this?)
    => Also, we may want to issue a 'connect to ourselves' automatically on start of
       core_api AND allow messages to self [CG/phillip]

0.9.0pre3:
* TRANSPORT: [MW]
  - [#1585, #1583, #1582] transport-level disconnect (i.e. TCP) does not cause core-level
    disconnect in a timely fashion (waits for connection timeout);
    need to figure a way to make it near-instant in those cases 
    (i.e. rapid reduction in timeout on transport-level disconnect) [CG]
    => may have been fixed with instant-notification of disconnect
       to core on session-oriented connection hick-up; not perfect but
       likely good enough until we get ATS going; still should be tested...
    => "peers connected (transport)" now instantly goes to ZERO (core statistic),
       but "established sessions" stays up...
* NAT/UPNP: [Milan / Ayush / MW]
  - [#1609] code clean up
  - testing
  - integration with transport service:
    + test TCP
    + implement UDP, HTTP/HTTPS 
* DHT: [Nate]
  - track paths content travels (PUT, reply-to-get) in messages,
    pass to client (client API & protocol already support this!)
* FS: [CG]
  - implement multi-peer FS performance tests
    + insert
    + download
    + search
* GNUNET-GTK: [CG]
  - figure out where in the GUI we should show active upload operations and allow aborts
  - handle events:
    + search error
    + publish error
* Determine RC bugs and fix those (release should have no known real bugs)

0.9.0:
* new webpage:
  - update books (especially for developers)
  - make a NICE download page and figure out how to enable developers to publish TGZs nicely
  - port "contact" page
* FS migration:
  - exclude content that will "soon" expire from migration
  - make migration data rate & datastore IO-rate configurable
  - exclude certain peers as targets (based on hash values) in each
    iteration => same peer can only be picked every n-th iteration 
    for the same content => fewer duplicate sending!
* big code review
* Determine RC bugs and fix those  (release should have no known real bugs)

0.9.1:
* TRANSPORT: [MW]
  - WiFi transport backend [DB]
  - Implement method of learning our external addresses from
    other peers; need some kind of threshold-based
    scheme, limiting both the total number of addresses that we accept 
    this way as well as requiring multiple confirmations; also, we
    should possibly try to confirm that the given address works for
    us ourselves (loopback-style) before adding it to the list
    + we may be able to simplify WELCOME messages (no need to add 
      addresses there anymore, but may help to learn them there anyway...).
    + we probably want some kind of voting/counting for learning IP addresses
      (maybe including IP addresses in ads proportional to how often others
       report them? we at least need some protection against >64k HELLOs!),
    + provide a way to give the user a list of "learned" IP addresses and
      a way to easily "veto" addresses off the list!
      => If MiM attacker uses vetoed address, blacklist the specific IP for
         the presumed neighbour!
  - need to periodically probe latency/transport cost changes & possibly switch transport
* DV: [Nate?]
  - proper bandwidth allocation
  - performance tests
* PEERINFO:	
  - merge multiple HELLOs of the same peer in the transmission queue
    (theoretically reduces overhead; bounds message queue size)
  - merge multiple iteration requests over "all" peers in the queue
    (theoretically reduces overhead; bounds messgae queue size)
* STATISTICS:
  - should use BIO instead of mmap
* FS: [CG]
  - Remove KBlocks in gnunet-unindex (see discussion with Kenneth Almquist on gnunet-devs in 9/2009)
  - use different queue prioritization for probe-downloads vs. normal downloads
  - re-implement gnunet-auto-share
* UTIL: [CG]
  - allow limiting UNIX socket access by UID/GID
* GNUNET-GTK: [CG]
  - add tool bar
  - do meaningful update to status line (starting up, peer running, #connections, shutdown, ...)
  - add progress dialog for 'add_dir_at_iter' scan (can take a while...)
  - NS list in search dialog should use colors to offset our own namespaces from the others
  - right-clicking on NS list in search dialog should open menu that allows 
    * viewing full meta data 
    * deletion of namespace info
  - implement unindex operation (use dialog with all indexed files for selection)
  - finish publish dialog details:
    + normalize keywords (edit subdialog)
  - implement download by URI dialog; figure out where to display those downloads!
* ARM: [CG/Safey]
  - better tracking of which config changes actually need to cause process restarts by ARM.
  - handle gnunet-arm -k in combination with auto-start magic (what is the right thing here?)
  - discover dependencies between services
* MONKEY: [Safey]
  - better crash management (attach debugging support, capture and analyze
    debug output, detect random vs. deterministic crashes)
  - '-m EMAIL' option for alternative e-mail TO
  - '-f FILENAME' option to write  report to file instead of e-mail (for testing!)

0.9.2:
* PEERINFO: [NN]
  - expire 'ancient' HELLOs (those without valid addresses AND that 
    we have not 'used' (for their public keys) in a while; need a way
    to track actual 'use')
  - make sue we also trigger notifications whenever HELLOs expire
* TCP:
  - repeatedly resolve hostname and look up interfaces to determine our own IP
  - [./transport/plugin_transport_tcp.c:391]: (style) struct or union member 'Plugin::address_update_task' is never used (related to issue above)
* TRANSPORT:
  - [./transport/gnunet-service-transport.c:173]: (style) struct or union member 'TransportPlugin::rebuild' is never used (related to TCP not refreshing external addresses?)
  - WiFi transport backend
    * nice signal strength adjustment [MW]
    * energy cost in ATS [MW]
* BLOCKS:
  - testcase would be nice
  - generic block support for DHT
* STATISTICS:
  - test notification-based statistics API
  - implement statistics GUI (=> start from gnunet-gtk by button!)
* PEERINFO: [NN]
  - move peerinfo to new GUI (=> start from gnunet-gtk by button!)
  - extend peer dialog with green-yellow-red connectivity status lights
  - extend peer dialog with country flags and names

0.9.3:
* SMTP transport backend:
  - sending (SMTP/SMTPS)
  - receiving (IMAP/IMAPS/POP?)
  - rate limiting
  - improved batching
  - resource limit integration with ATS
* VPN [PT]
  - TCP entry/exit
  - internal services
  - integration with DHT routing
  - optimized routes (beyond DHT/DV)
  - "DNS" .gnunet
