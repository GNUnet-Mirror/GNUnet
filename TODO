0.9.0pre1:
* FS: [CG]
  - Migration test error scenarios:
    1) peers fail to connect (very, very rare) => maybe explained with bandwidth bug discovered with transport test
    2) 1 out of 3 bits of content fails to migrate (destination peer never sees it);
       suspicion: core packs two migration messages into one, and someone throws away the 2nd half!
       => likely reproduced with new core api reliability test (which now passes but showed bugs)
       => might be fixed now with util's server-nc and core's 'short-fuse' bugs begin fixed
    3) client fails to connect to FS service for download (requests never make it to FS)
       FS was running initially, but is shut down around the time the source peer (!)
       is supposed to die; the OTHER FS service (the one that was supposed to die) is still up!
  - TTL/priority calculations
  - hot-path routing, load considerations
  - statistics
  - active reply route caching design & implementation of service; gap extension!
* TRANSPORT:
  - HTTP backend [MW]
* DV: [Nate]
  - write DV API (need to move declarations from dv_api.c to gnunet_dv_service.h!)
  - implement DV service 
  - implement DV library (looks done)
  - implement DV transport plugin
  - implement testcases 
  - implement performance tests (needs tbench)
* TOPOLOGY:
  - needs more testing (especially F2F topology) & transport blacklisting
* UTIL:
  - only connect() sockets that are ready (select()) [Nils]
    [On W32, we need to select after calling socket before doing connect etc.]
  - add support for UNIX domain sockets [CG]
* GNUNET-GTK:
  - write main loop: 
    + use g_main_context_set_poll_func to integrate GTK with GNUnet Scheduler!? (YUCK!)
    + OR: add scheduler API to enable integration with GTK main loop instead of doing our own select
    + use g_main_context_pending, g_main_context_query / g_main_context_check / g_main_context_dispatch
       and NEVER g_main_loop_run (can this be done? might be the clean way to do this! But how
       to integrate this with "gtk_main"?  Docu says:
       "It's OK to use the GLib main loop directly instead of gtk_main(), though it involves 
        slightly more typing. See GMainLoop in the GLib documentation."
       => so maybe it "just works"?
  - implement glade loader
  - implement main quit handler (file-quit and main window close) 
  - implement about menu handler
  - add license to about dialog  
  - add authors to about dialog
  - add translators to about dialog 
  - add documenters to about dialog
  - add artists to about dialog
  - test logo in about dialog
  - test logo in main dialog (window icon)
  - implement search dialog opening and actual search
  - NS list in search dialog should use colors to offset our own namespaces from the others
  - double-clicking on NS list in search dialog should move 'root' to keyword line
  - double-clicking on search result in master list should open save-as dialog for CHK/LOC URIs
  - right-clicking on search result should open menu that allows:
    + viewing full meta data 
    + starting download
    + starting recursive download 
    + aborting active download
  - right-clicking on NS list in search dialog should open menu that allows 
    + viewing full meta data 
    + deletion of namespace info
  - master should add tab to main notebook with label with 'new' icon that allows starting of a search (same as via menu)
  - tabs in notebook should contain:
    + "X" to allow closing of tabs
    + "play" to allow resuming of search OR "pause" to allow pausing of search
  - implement open directory dialog
  - implement new-pseudonym dialog
  - implement publish dialog
    + add (single file)
    + edit (meta data add, meta data del, meta data type population, keyword add (button, activate entry line), 
            keyword remove, anonymity level, priority, index/insert, normalize keywords, 
            previews, preview widget for file chooser!?)
    + mark 'insert file' button inconsistent for directories
    + up
    + down
    + left
    + right
    + delete
    + open (import directory structure)
    + cancel
    + execute (publish)
  - pick appropriate sort-by columns for various tree view columns
  - anonymity spin buttons should turn red on zero:
    + search
    + publish
    + download

0.9.0pre2:
* CORE:
  - transport-level disconnect (i.e. TCP) does not cause core-level
    disconnect in a timely fashion (waits for connection timeout);
    need to figure a way to make it near-instant in those cases 
    (i.e. rapid reduction in timeout on transport-level disconnect)
  - encrypted P2P transmission (loopback) tops at 2 MB/s on my quad-core;
    why is it so slow? Fix! (see core_api_reliability test)
* TBENCH: [MW]
  - good to have for transport/DV evaluation! 
* DHT: [Nate]
  - implement DHT service 
  - implement testcases
  - implement performance tests
* ARM: [Safey]
  - better crash management (attach debugging support, capture and analyze
    debug output, detect random vs. deterministic crashes)
  - discover dependencies between services
    => need UNIX domain sockets first!
  - handle gnunet-arm -k in combination with auto-start magic (what is the right thing here?)
* FS: [CG]
  - datastore reservation (publishing)
  - location URIs (publish, search, download)
  - unindex on index failure
  - utilize in-line files in meta data always (including in search results or
    when download is triggered manually and for probes); currently the data is
    only used when users do a general 'recursive' download
  - non-anonymous FS service (needs DHT)
    + DHT integration for search
    + CS-DHT-functions (DHT-put of LOC)
    + P2P-functions (DHT-get)
  - collection API & tests
    + gnunet-pseudonym (collection support)
  - implement FS performance tests
    + insert
    + download
    + search
    + unindex
* GNUNET-GTK:
  - handle view-metadata toggle
  - handle view-preview toggle
  - implement API to get notifications about bandwidth assignments to individual peers
  - implement API to get notifications about updates to liveness of individual peers (before disconnect)
  - handle view-neighbours toggle
  - extend peer dialog with green-yellow-red connectivity status lights
  - implement statistics tabs
  - handle view-statistics toggle
  - do meaningful update to status line (starting up, peer running, #connections, shutdown, ...)
  - implement unindex operation (use dialog with all indexed files for selection)
  - implement download by URI dialog; figure out where to display those downloads!
  - figure out where in the GUI we should show active uploads/unindex operations and allow aborts
* SETUP:
  - design & implement new setup tool

0.9.0pre3:
* TRACEKIT: [MW]
  - good to have for DV/DHT evaluation!
* Determine RC bugs and fix those!
* DATASTORE:
  - GNUNET_DATASTORE_cancel method not tested
* TESTING: [Nate]
  - modify configuration to allow controlling connections for non-local starts
  - testbed creation with topology (needs working F2F topology) 
  - testbed with churn 
  - implement testcases for distributed testing
  - test basic peer re-configure 
  - test topology creation 
  - test churn generation 
  - consider changing API for peer-group termination to 
    call continuation when done
* NAT/UPNP: [MW]
  - finalize API design
  - code clean up
  - testing
  - integration with transport service
* MYSQL database backends: [CG]
  - datacache
  - datastore
* FS:
  - reconstruct IBLOCKS from DBLOCKS if possible (during download; see FIXME in fs_download)
  - add support for pushing "already seen" search results to FS service for bloomfilter (can wait)
  - use different 'priority' for probe downloads vs. normal downloads
* ARM:
  - better tracking of which config changes actually need to cause process restarts by ARM.

0.9.0:
* new webpage:
  - expand bibliography
  - convert documentation pages to books
  - update books (especially for developers)
  - create good Drupal theme for GNUnet
  - make a NICE download page and figure out how to enable developers to publish TGZs nicely
  - port "contact" page
  - add content type for "todo" items?
* POSTGRES database backends: [CG]
  - datacache
  - datastore
* Determine RC bugs and fix those!

0.9.x:
* TRANSPORT: [MW]
  - SMTP transport backend
  - HTTPS transport backend
    + improved HTTPS support in MHD
    + actual plugin
  - Implement method of learning our external addresses from
    other peers; need some kind of threshold-based
    scheme, limiting both the total number of addresses that we accept 
    this way as well as requiring multiple confirmations; also, we
    should possibly try to confirm that the given address works for
    us ourselves (loopback-style) before adding it to the list
    + we may be able to simplify WELCOME messages (no need to add 
      addresses there anymore, but may help to learn them there anyway...).
    + we probably want some kind of voting/counting for learning IP addresses
      (maybe including IP addresses in ads proportional to how often others
       report them? we at least need some protection against >64k HELLOs!),
    + provide a way to give the user a list of "learned" IP addresses and
      a way to easily "veto" addresses off the list!
      => If MiM attacker uses vetoed address, blacklist the specific IP for
         the presumed neighbour!
  - implement gnunet-transport (transport configurator / tester)
  - UPnP-based IP detection
    (Note: build library always, build service when libxml2/etc. are available)
* FS: [CG]
  - Remove KBlocks in gnunet-unindex (see discussion with Kenneth Almquist on gnunet-devs in 9/2009)
* PEERINFO: [CG]
  - expire 'ancient' HELLOs (those without valid addresses AND that 
    we have not 'used' (for their public keys) in a while; need a way
    to track actual 'use')
  - make sue we also trigger notifications whenever HELLOs expire
* VPN



Optimizations:
* TCP:
  - should use hash map to look up sessions
* STATISTICS:
  - should use BIO instead of mmap
* TRANSPORT:
  - need to periodically probe latency/transport cost changes & possibly switch transport
  - should use hash map to look up Neighbours (service AND plugins!)
* DATASTORE (?):
  - check for duplicates on insertion (currently, same content is frequently
    stored again [seen with KBLOCKS and SBLOCKS]!)
* PEERINFO:
  - merge multiple HELLOs of the same peer in the transmission queue
    (theoretically reduces overhead; bounds message queue size)
  - merge multiple iteration requests over "all" peers in the queue
    (theoretically reduces overhead; bounds messgae queue size)
* FS:
  - use different queue prioritization for probe-downloads vs. normal downloads (!?)

Minor features:
* TCP:
  - repeatedly resolve hostname and look up interfaces to determine our own IP
  - [./transport/plugin_transport_tcp.c:391]: (style) struct or union member 'Plugin::address_update_task' is never used (related to issue above)
* TRANSPORT:
  - [./transport/gnunet-service-transport.c:173]: (style) struct or union member 'TransportPlugin::rebuild' is never used (related to TCP not refreshing external addresses?)
* BLOCKS:
  - testcase would be nice...
