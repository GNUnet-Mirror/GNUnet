0.9.0pre0 [April]:
* CORE: [CG]
  - "Forcing disconnect of XXX due to inactivity" -- can happen every few MS!?
    (disconnect does not really succeed, or what?)
    Also, core does not seem to actually decrement the number of active
    sessions even if no connections exist for a while! (likely related...)
* WWW:
  - Get IPv6 hooked up [AK, after April 12th]
  - change DNS [CG, need DNS]

0.9.0pre1:
* PEERINFO:
  - trust: need *fast* way to check/update trust in peers
           (async peerinfo would not be right; certainly not with the
            current API)
* UTIL:
  - scheduler should change OS process priority based on task priority;   
    should make better use of task priorities in general
  - only connect() sockets that are ready (select()) [Nils]
    [On W32, we need to select after calling socket before
     doing connect etc.]
* HELLO: [CG]
  - need function to test "equivalency" of HELLOs (or integrate with "merge"?); use in PEERINFO
* SETUP:
  - design & implement new setup tool
* TBENCH: [MW]
  - good to have for transport/DV evaluation! 
* DV: [Nate]
  - write DV API (need to move declarations from dv_api.c to gnunet_dv_service.h!)
  - implement DV service 
  - implement DV library (looks done)
  - implement DV transport plugin
  - implement testcases 
  - implement performance tests
* STATISTICS:
  - does not seem to work with timeouts (especially if service is not running)
* TOPOLOGY:
  - needs more testing (especially F2F topology)
  - needs to re-try connecting after disconnect (currently, it
    initially triggers a connection request, but if that connection
    fails / goes down, it does not retry in a timely fashion;
    cause seems to be the 'blacklist_after_attempt' being set to 1h,
    which is rather long -- and should probably be adjusted based on
    the number of connections / known peers)
  - If the topology daemon crashes, peers that were put on the
    blacklist with transport will never be removed from it (until
    transport service dies); we should use the blacklist notification
    API to learn about the exact set of blacklisted peers at all times
    (FIXME: the transport_api implementation of blacklisting
     also does not work nicely for this since it won't let us know about
     disconnect-reconnect events and the implicit whitelisting
     that might happen here; that's not so bad since we will
     re-blacklist on pre-connect attempts anyway, so this is 
     a minor issue; OTOH, we might want to be more explicit about
     allowing/forbidding connects on pre-connect to avoid 
     entering connect attempts to just be blacklisted shortly afterwards).
  - the code uses the term 'blacklist' for both peers that are forbidden
    to connect (i.e. F2F mode) as well as peers that we currently
    won't try to actively connect to ourselves (since we just tried);
    This is confusing.  We need two distinct terms (greylist?).
  - move code to use hash table instead of linked list
  - instead of periodically discarding blacklisted entries,
    simply add task that is triggered at the right time (earlier free,
    more balanced load)
  - check if new HELLO learned is different from old HELLO
    before resetting entire state!
* FS: [CG]
  - support recursive download even if filename is NULL and we hence
    do not generate files on disk (use temp_filename)
  - bound parallelism (# fs downloads)
  - distinguish in performance tracking and event signalling between
    downloads that are actually running and those that are merely in the queue
  - persistence support (publish, unindex, search, download)
  - active migration support (in fs or in datastore or new daemon?)
  - gnunet-service-fs (hot-path routing, load-based routing, nitpicks)
  - [gnunet-service-fs.c:208]: member 'LocalGetContext::results_bf_size' is never used
  - [gnunet-service-fs.c:501]: member 'PendingRequest::used_pids_size' is never used
  - [gnunet-service-fs.c:654]: member 'ConnectedPeer::last_client_replies' is never used
  - [gnunet-service-fs.c:669]: member 'ConnectedPeer::avg_delay' is never used
  - [gnunet-service-fs.c:675]: member 'ConnectedPeer::avg_priority' is never used
  - [gnunet-service-fs.c:688]: member 'ConnectedPeer::pending_requests' is never used
  - [gnunet-service-fs.c:694]: member 'ConnectedPeer::last_p2p_replies_woff' is never used
  - [gnunet-service-fs.c:700]: member 'ConnectedPeer::last_client_replies_woff' is never used
  - GAP improvements:
    + active reply route caching design & implementation of service; gap extension!
* DATASTORE:
  - API lacks cancellation methods (needed? or is disconnect enough?); 
    may also want to integrate request queuing here instead of gnunet-service-fs_drq.c 
* GNUNET-GTK:
  - how to integrate scheduler with GTK event loop!?

0.9.0pre2:
* TRACEKIT: [MW]
  - good to have for DV/DHT evaluation!
* DHT: [Nate]
  - implement DHT service 
  - implement DHT library
  - implement testcases
  - implement performance tests
* TRANSPORT:
  - HTTP backend [MW]
* ARM: [Safey]
  - need to get rid of synchronous API for service starts (cause all kinds of problems)
    [=> eliminate for need to tell ARM about service starts most of the time!] [Safey]
  - better tracking of which config changes actually need to cause process restarts by ARM.
  - listen for requests to discover dependencies between services (and avoid
    having to explicitly program start requests)
  - better crash management (attach debugging support, capture and analyze
    debug output, detect random vs. deterministic crashes)
  - shutdown sequence?
* FS: [CG]
  - datastore reservation (publishing)
  - search: availability probes
  - location URIs (publish, search, download)
  - non-anonymous FS service (needs DHT)
    + DHT integration for search
    + CS-DHT-functions (DHT-put of LOC)
    + P2P-functions (DHT-get)
  - collection API & tests
    + gnunet-pseudonym (collection support)
  - implement FS performance tests
    + insert
    + download
    + search
    + unindex

0.9.0pre3:
* Determine RC bugs and fix those!
* TESTING: [Nate]
  - modify configuration to allow controlling connections for non-local starts
  - testbed creation with topology (needs working F2F topology) 
  - testbed with churn 
  - implement testcases for distributed testing
  - test basic peer re-configure 
  - test topology creation 
  - test churn generation 
  - consider changing API for peer-group termination to 
    call continuation when done
* NAT/UPNP: [MW]
  - finalize API design
  - code clean up
  - testing
  - integration with transport service
* MYSQL database backends: [CG]
  - datacache
  - datastore

0.9.0:
* new webpage:
  - expand bibliography
  - convert documentation pages to books
  - update books (especially for developers)
  - create good Drupal theme for GNUnet
  - make a NICE download page and figure out how to 
    enable developers to publish TGZs nicely
  - port "contact" page
  - add content type for "todo" items?
* POSTGRES database backends: [CG]
  - datacache
  - datastore
* Determine RC bugs and fix those!

0.9.x:
* TRANSPORT: [MW]
  - SMTP transport backend
  - HTTPS transport backend
    + improved HTTPS support in MHD
    + actual plugin
  - Implement method of learning our external addresses from
    other peers; need some kind of threshold-based
    scheme, limiting both the total number of addresses that we accept 
    this way as well as requiring multiple confirmations; also, we
    should possibly try to confirm that the given address works for
    us ourselves (loopback-style) before adding it to the list
    + we may be able to simplify WELCOME messages (no need to add 
      addresses there anymore, but may help to learn them there anyway...).
    + we probably want some kind of voting/counting for learning IP addresses
      (maybe including IP addresses in ads proportional to how often others
       report them? we at least need some protection against >64k HELLOs!),
    + provide a way to give the user a list of "learned" IP addresses and
      a way to easily "veto" addresses off the list!
      => If MiM attacker uses vetoed address, blacklist the specific IP for
         the presumed neighbour!
  - implement gnunet-transport (transport configurator / tester)
  - UPnP-based IP detection
    (Note: build library always, build service when libxml2/etc. are available)
* FS: [CG]
  - Remove KBlocks in gnunet-unindex (see discussion with Kenneth Almquist on gnunet-devs in 9/2009)
  - Allow checking of presence of search results and/or content via command-line tools
    (add options to gnunet-search / gnunet-download to limit search to local peer)
* PEERINFO: [CG]
  - expire 'ancient' HELLOs (those without valid addresses AND that 
    we have not 'used' (for their public keys) in a while; need a way
    to track actual 'use')
  - make sue we also trigger notifications whenever HELLOs expire
* VPN



Optimizations:
* TCP:
  - should use hash map to look up sessions
* PEERINFO:
  - api creates many, many short-lived TCP connections; either some
    clients should use the API differently or we need to change the
    API to enable re-use of connections to the service
* STATISTICS:
  - should use BIO instead of mmap
* TRANSPORT:
  - need to periodically probe latency/transport cost changes & possibly switch transport
  - instantly filter addresses from *other* peers that 
    are *equal* to our own address + port (i.e., localhost:2086).  We 
    no longer filter those for outgoing (helps with loopback testing
    and keeps the code clean), but we should filter strictly *impossible*
    incoming addresses!  This is for efficiency, not correctness.
  - should use hash map to look up Neighbours
* HOSTLIST:
  - 'server' uses 'GNUNET_PEERINFO_iterate', should probably switch to notification API
    (for more instant / up-to-date hostlists at lower cost) [OPTIMIZATION]
* DATASTORE (?):
  - check for duplicates on insertion (currently, same content is frequently
    stored again [seen with KBLOCKS and SBLOCKS]!)

Minor features:
* TCP:
  - repeatedly resolve hostname and look up interfaces to determine our own IP
  - [./transport/plugin_transport_tcp.c:391]: (style) struct or union member 'Plugin::address_update_task' is never used (related to issue above)
* TRANSPORT:
  - [./transport/gnunet-service-transport.c:173]: (style) struct or union member 'TransportPlugin::rebuild' is never used (related to TCP not refreshing external addresses?)
* DATACACHE:
  - add stats (# bytes available, # bytes used, # PUTs, # GETs, # GETs satisfied)
* FS:
  - support inline data in directories for recursive file downloads (fs_download)

